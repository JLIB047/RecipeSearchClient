{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchRecipe.js","utils/queries.js","pages/SavedRecipe.js","components/SignupForm.js","components/LoginForm.js","components/NavBar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeRecipeId","idMeal","savedRecipeIds","JSON","parse","updatedSavedRecipeIds","filter","savedRecipeId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_RECIPE","REMOVE_RECIPE","SearchRecipe","useState","searchedRecipes","setSearchedRecipes","searchInput","setSearchInput","setSavedRecipeIds","useMutation","saveRecipe","useEffect","recipeIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","console","log","json","meals","recipeData","map","recipe","strMeal","strInstructions","error","handleSaveRecipe","recipeToSave","find","Auth","loggedIn","variables","input","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Body","Title","Text","disabled","some","onClick","GET_ME","SavedRecipe","useQuery","loading","removeRecipe","userData","me","handleDeleteRecipe","savedRecipes","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","NavBar","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"scAgDe,M,0FA1Cb,WACE,OAAOA,IAAOC,KAAKC,c,sBAIrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAIzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,MC5BZE,EAAiB,SAACC,GAC7B,IAAMC,EAAiBV,aAAaC,QAAQ,iBACxCU,KAAKC,MAAMZ,aAAaC,QAAQ,kBAChC,KAEJ,IAAKS,EACH,OAAO,EAGT,IAAMG,EAAqB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAgBI,QAAO,SAACC,GAAD,OAAmBA,IAAkBN,KAG1F,OAFAT,aAAaG,QAAQ,gBAAiBQ,KAAKK,UAAUH,KAE9C,G,0BC1BEI,EAAaC,YAAH,oQAYVC,EAAWD,YAAH,gUAaRE,EAAcF,YAAH,0TAgBXG,EAAgBH,YAAH,uSCqGXI,EAvIM,WACjB,MAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4CJ,mBFXrBvB,aAAaC,QAAQ,gBACxCU,KAAKC,MAAMZ,aAAaC,QAAQ,iBAChC,IESJ,mBAAOS,EAAP,KAAuBkB,EAAvB,KACA,EAAqBC,YAAYT,GAA1BU,EAAP,oBAEAC,qBAAU,WACN,OAAO,WFRgB,IAACC,KEQGtB,GFPfuB,OACdjC,aAAaG,QAAQ,eAAgBQ,KAAKK,UAAUgB,IAEpDhC,aAAaO,WAAW,oBEO1B,IAAM2B,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACrBD,EAAME,iBAEFX,EAHiB,0CAIV,GAJU,gCAQMY,MAAM,wDAAD,OAAyDZ,IARpE,WAQXa,EARW,QAUJC,GAVI,sBAWP,IAAIC,MAAM,yBAXH,cAalBC,QAAQC,IAAIjB,GAbM,UAeOa,EAASK,OAfhB,iBAeTC,EAfS,EAeTA,MACNH,QAAQC,IAAI,CAACE,UACTC,EAAaD,EAAME,KAAI,SAACC,GAAD,MAAa,CAEtCvC,OAAQuC,EAAOvC,OACfwC,QAASD,EAAOC,QAChBC,gBAAiBF,EAAOE,oBAI5BzB,EAAmBqB,GACnBnB,EAAe,IA1BE,kDA4BjBe,QAAQS,MAAR,MACAT,QAAQC,IAAR,MA7BiB,0DAAH,sDAiChBS,EAAgB,uCAAG,WAAO3C,GAAP,mBAAA2B,EAAA,yDAEjBiB,EAAe7B,EAAgB8B,MAAK,SAACN,GAAD,OAAYA,EAAOvC,SAAWA,KACvEiC,QAAQC,IAAI,iBAAiBU,GAIhBE,EAAKC,WAAaD,EAAK9D,WAAa,KAP3B,0CAUd,GAVc,cAYvBiD,QAAQC,IAAI,cAZW,kBAcEb,EAAW,CAChC2B,UAAW,CAAEC,MAAOL,KAfD,gBAcbM,EAda,EAcbA,KAGRjB,QAAQC,IAAI,CAACgB,SACbjB,QAAQC,IAAIjC,EAAeiD,EAAK,iBAEhC/B,EAAkB,GAAD,mBAAKlB,GAAL,CAAqB2C,EAAa5C,UApB9B,kDAuBrBiC,QAAQS,MAAR,MAvBqB,0DAAH,sDA2BtB,OACI,oCACF,kBAACS,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,sBACzB,kBAACC,EAAA,EAAD,KACE,mDACA,kBAACC,EAAA,EAAD,CAAMC,SAAU/B,GACd,kBAAC8B,EAAA,EAAKE,IAAN,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACL,EAAA,EAAKM,QAAN,CACEC,KAAK,cACLC,MAAO9C,EACP+C,SAAU,SAACC,GAAD,OAAO/C,EAAe+C,EAAEC,OAAOH,QACzCI,KAAK,OACLC,KAAK,KACLC,YAAY,yBAGhB,kBAACX,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACU,EAAA,EAAD,CAAQjB,UAAU,YAAYc,KAAK,SAASI,QAAQ,UAAUH,KAAK,MAAnE,sBASV,kBAACd,EAAA,EAAD,KACE,4BACGvC,EAAgBS,OAAhB,kBACcT,EAAgBS,OAD9B,aAEG,gCAEN,kBAACgD,EAAA,EAAD,KACGzD,EAAgBuB,KAAI,SAACC,GACpB,OACE,kBAACkC,EAAA,EAAD,CAAMC,IAAKnC,EAAOvC,OAAQ2E,OAAO,QAI/B,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KAAatC,EAAOC,SAEpB,kBAACiC,EAAA,EAAKK,KAAN,KAAYvC,EAAOE,iBAClBK,EAAKC,YACJ,kBAACuB,EAAA,EAAD,CACES,SAAQ,OAAE9E,QAAF,IAAEA,OAAF,EAAEA,EAAgB+E,MAAK,SAAC1E,GAAD,OAAmBA,IAAkBiC,EAAOvC,UAC3EqD,UAAU,qBACV4B,QAAS,kBAAMtC,EAAiBJ,EAAOvC,WACxB,OAAdC,QAAc,IAAdA,OAAA,EAAAA,EAAgB+E,MAAK,SAAC1E,GAAD,OAAmBA,IAAkBiC,EAAOvC,WAC9D,sCACA,8B,SChIbkF,EAASzE,YAAH,2QC8EJ0E,EAtEK,WAElB,MAAyBC,YAASF,GAA1BG,EAAR,EAAQA,QAASnC,EAAjB,EAAiBA,KACjBjB,QAAQC,IAAIgB,GACZ,MAAgC9B,YAAYR,GAA5C,mBAAO0E,EAAP,KAEMC,GAFN,KAAsB7C,OAED,OAAJQ,QAAI,IAAJA,OAAA,EAAAA,EAAMsC,KAAM,IAIvBC,EAAkB,uCAAG,WAAOzF,GAAP,eAAA2B,EAAA,yDAEXmB,EAAKC,WAAaD,EAAK9D,WAAa,KAFzB,0CAKhB,GALgB,gCAUFsG,EAAa,CAChCtC,UAAW,CAAEhD,YAXQ,kBAUhBkD,KAKPnD,EAAeC,GAfQ,kDAiBvBiC,QAAQS,MAAR,MAjBuB,0DAAH,sDAsBxB,OAAI2C,EACK,0CAIP,oCACE,kBAAClC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,sBACzB,kBAACC,EAAA,EAAD,KACE,wDAGJ,kBAACA,EAAA,EAAD,KACE,4BACGiC,EAASG,aAAalE,OAAtB,kBACc+D,EAASG,aAAalE,OADpC,kBACqF,IAAjC+D,EAASG,aAAalE,OAAe,SAAW,UADpG,KAEG,8BAEN,kBAACgD,EAAA,EAAD,KACGe,EAASG,aAAapD,KAAI,SAACC,GAC1B,OACE,kBAACkC,EAAA,EAAD,CAAMC,IAAKnC,EAAOvC,OAAQ2E,OAAO,QAE/B,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KAAatC,EAAOC,SACpB,kBAACiC,EAAA,EAAKK,KAAN,KAAYvC,EAAOE,iBACnB,kBAAC6B,EAAA,EAAD,CAAQjB,UAAU,uBAAuB4B,QAAS,kBAAMQ,EAAmBlD,EAAOvC,UAAlF,gC,sDC0JH2F,GA1GI,WAEjB,MAAwC7E,mBAAS,CAAE8E,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KAGA,EAAoBlF,oBAAS,GAAtBmF,EAAP,oBAIA,EAAkCnF,oBAAS,GAA3C,mBAAOoF,EAAP,KAAkBC,EAAlB,KAEA,EAA6B/E,YAAYV,GAAzC,mBAAO0F,EAAP,KAAkB1D,EAAlB,KAAkBA,MAEZ2D,EAAoB,SAAC3E,GACzB,MAAwBA,EAAMwC,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdiC,EAAgB,2BAAKD,GAAN,kBAAqBjC,EAAOC,MAGvCtC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,kBAIuB,IADhBF,EAAM4E,cACVC,kBACP7E,EAAME,iBACNF,EAAM8E,mBAPe,kBAWEJ,EAAQ,CAC7BpD,UAAU,eAAM+C,KAZG,gBAWb7C,EAXa,EAWbA,KAIPJ,EAAK2D,MAAMvD,EAAKkD,QAAQnH,OAfJ,kDAiBrBgD,QAAQS,MAAR,MACAyD,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxBW,0DAAH,sDA4BtB,OACE,oCAEE,kBAACvC,EAAA,EAAD,CAAMmD,YAAU,EAACT,UAAWA,EAAWzC,SAAU/B,GAE/C,kBAACkF,GAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMV,GAAa,IAAQW,KAAMZ,EAAW3B,QAAQ,UAAhF,0CAIA,kBAAChB,EAAA,EAAKwD,MAAN,KACE,kBAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,gBACZP,KAAK,WACLE,SAAUqC,EACVtC,MAAOgC,EAAaH,SACpBsB,UAAQ,IAEV,kBAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,WAA5B,0BAGF,kBAACZ,EAAA,EAAKwD,MAAN,KACE,kBAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,SAApB,SACA,kBAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,QACLE,YAAY,qBACZP,KAAK,QACLE,SAAUqC,EACVtC,MAAOgC,EAAaF,MACpBqB,UAAQ,IAEV,kBAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,WAA5B,uBAGF,kBAACZ,EAAA,EAAKwD,MAAN,KACE,kBAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUqC,EACVtC,MAAOgC,EAAaD,SACpBoB,UAAQ,IAEV,kBAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,WAA5B,0BAEF,kBAACG,EAAA,EAAD,CACES,WAAYgB,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxE3B,KAAK,SACLI,QAAQ,WAHV,WAQD7B,GAAS,iDChCD0E,GAnFG,WAChB,MAAwCtG,mBAAS,CAAE+E,MAAO,GAAIC,SAAU,KAAxE,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAoBlF,oBAAS,GAAtBmF,EAAP,oBACA,EAAkCnF,oBAAS,GAA3C,mBAAOoF,EAAP,KAAkBC,EAAlB,KAEME,EAAoB,SAAC3E,GACzB,MAAwBA,EAAMwC,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdiC,EAAgB,2BAAKD,GAAN,kBAAqBjC,EAAOC,MAE7C,EAA2B3C,YAAYZ,GAAvC,mBAAOiG,EAAP,KAAgB/D,EAAhB,KAAgBA,MAEVjB,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,kBAIuB,IADhBF,EAAM4E,cACVC,kBACP7E,EAAME,iBACNF,EAAM8E,mBAPe,kBAWEC,EAAM,CAC3BzD,UAAU,eAAM+C,KAZG,gBAWb7C,EAXa,EAWbA,KAIRJ,EAAK2D,MAAMvD,EAAKuD,MAAMxH,OAfD,kDAiBrBgD,QAAQS,MAAR,MACAyD,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxBW,0DAAH,sDA4BtB,OACE,oCACE,kBAACvC,EAAA,EAAD,CAAMmD,YAAU,EAACT,UAAWA,EAAWzC,SAAU/B,GAC/C,kBAACkF,GAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMV,GAAa,IAAQW,KAAMZ,EAAW3B,QAAQ,UAAhF,qDAGA,kBAAChB,EAAA,EAAKwD,MAAN,KACE,kBAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,SAApB,SACA,kBAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,aACZP,KAAK,QACLE,SAAUqC,EACVtC,MAAOgC,EAAaF,MACpBqB,UAAQ,IAEV,kBAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,WAA5B,uBAGF,kBAACZ,EAAA,EAAKwD,MAAN,KACE,kBAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUqC,EACVtC,MAAOgC,EAAaD,SACpBoB,UAAQ,IAEV,kBAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,WAA5B,0BAEF,kBAACG,EAAA,EAAD,CACES,WAAYgB,EAAaF,OAASE,EAAaD,UAC/C3B,KAAK,SACLI,QAAQ,WAHV,WAOD7B,GAAS,+CCvGD2E,GApEG,WACd,MAAkCvG,oBAAS,GAA3C,mBAAOwG,EAAP,KAAkBC,EAAlB,KAGJ,OACI,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOlD,QAAQ,OAAOmD,OAAO,MACtC,kBAACpE,EAAA,EAAD,CAAWF,OAAK,GACd,kBAACoE,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,iBAGA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,WAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,UAClB,kBAACC,EAAA,EAAD,CAAK9E,UAAU,WACb,kBAAC8E,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,KAAvB,sBAIChF,EAAKC,WACJ,oCACE,kBAACoF,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,UAAvB,oBAGA,kBAACK,EAAA,EAAIN,KAAL,CAAU5C,QAASnC,EAAKsF,QAAxB,WAGF,kBAACD,EAAA,EAAIN,KAAL,CAAU5C,QAAS,kBAAMsC,GAAa,KAAtC,qBAOV,kBAACc,EAAA,EAAD,CACEjE,KAAK,KACL0C,KAAMQ,EACNgB,OAAQ,kBAAMf,GAAa,IAC3BgB,kBAAgB,gBAEhB,kBAACC,EAAA,EAAIlF,UAAL,CAAemF,iBAAiB,SAC9B,kBAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACN,EAAA,EAAMxD,MAAP,CAAaqD,GAAG,gBACd,kBAACC,EAAA,EAAD,CAAK5D,QAAQ,SACX,kBAAC4D,EAAA,EAAIS,KAAL,KACE,kBAACT,EAAA,EAAIN,KAAL,CAAUgB,SAAS,SAAnB,UAEF,kBAACV,EAAA,EAAIS,KAAL,KACE,kBAACT,EAAA,EAAIN,KAAL,CAAUgB,SAAS,UAAnB,eAKR,kBAACR,EAAA,EAAMzD,KAAP,KACE,kBAAC4D,EAAA,EAAIM,QAAL,KACE,kBAACN,EAAA,EAAIO,KAAL,CAAUF,SAAS,SACjB,kBAAC,GAAD,CAAWG,iBAAkB,kBAAMzB,GAAa,OAElD,kBAACiB,EAAA,EAAIO,KAAL,CAAUF,SAAS,UACjB,kBAAC,GAAD,CAAYG,iBAAkB,kBAAMzB,GAAa,aCzD3D0B,I,OAAWC,YAAe,CAC9BC,IAAK,kDAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BtK,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACL+J,QAAQ,2BACHA,GADE,IAELC,cAAevK,EAAK,iBAAaA,GAAU,SAK3CwK,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAuBEC,OAjBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,IACxB,kBAAC,IAAD,KACE,oCACE,kBAACQ,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvJ,IACjC,kBAAC,IAAD,CAAOqJ,OAAK,EAACC,KAAK,SAASC,UAAWjF,IACtC,kBAAC,IAAD,CAAOkF,OAAQ,kBAAM,wBAAIhH,UAAU,aAAd,uBC7B/BiH,IAASD,OACP,kBAAC,IAAME,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.634f7ee2.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","export const getSavedRecipeIds = () => {\n    const savedRecipeIds = localStorage.getItem('saved_recipe')\n      ? JSON.parse(localStorage.getItem('saved_recipe'))\n      : [];\n  \n    return savedRecipeIds;\n  };\n  \n  export const saveRecipeIds = (recipeIdArr) => {\n    if (recipeIdArr.length) {\n      localStorage.setItem('saved_recipe', JSON.stringify(recipeIdArr));\n    } else {\n      localStorage.removeItem('saved_recipe');\n    }\n  };\n  \n  export const removeRecipeId = (idMeal) => {\n    const savedRecipeIds = localStorage.getItem('saved_recipes')\n      ? JSON.parse(localStorage.getItem('saved_recipes'))\n      : null;\n  \n    if (!savedRecipeIds) {\n      return false;\n    }\n  \n    const updatedSavedRecipeIds = savedRecipeIds?.filter((savedRecipeId) => savedRecipeId !== idMeal);\n    localStorage.setItem('saved_recipes', JSON.stringify(updatedSavedRecipeIds));\n  \n    return true;\n};","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql `\n    mutation login ($email: String!, $password: String!) {\n        login(email: $email, password: $password){\n            token\n            user {\n                _id \n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql `\n    mutation addUser($username: String!, $email: String! $password: String!) {\n        addUser(username: $username, email: $email, password: $password){\n            token\n            user {\n                _id\n                username\n                \n            }\n        }\n    }\n`;\n\nexport const SAVE_RECIPE = gql `\n    mutation saveRecipe($input:savedRecipe!){\n        saveRecipe( input:$input){\n            username\n            email \n            savedRecipes {\n                idMeal\n                strMeal\n                strInstructions\n                \n            }\n        }\n    }\n`;\n\n// idMeal was recipeId \nexport const REMOVE_RECIPE = gql `\n    mutation removeRecipe($idMeal:ID!) {\n        removeRecipe(idMeal: $idMeal) {\n            username\n            email\n            savedRecipes {\n                idMeal\n                strMeal\n                strInstructions\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n//import { searchRecipe } from '../utils/API'\nimport Auth from '../utils/auth';\nimport { saveRecipeIds, getSavedRecipeIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/react-hooks';\nimport {SAVE_RECIPE} from '../utils/mutations';\n//import {GET_ME} from '../utils/queries';\n\nconst SearchRecipe = () => {\n    const [searchedRecipes, setSearchedRecipes] = useState([]);\n    const [searchInput, setSearchInput] = useState('');\n    const [savedRecipeIds, setSavedRecipeIds] = useState(getSavedRecipeIds());\n    const [saveRecipe] = useMutation(SAVE_RECIPE);\n\n    useEffect(() => {\n        return () => saveRecipeIds(savedRecipeIds);\n    });\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        if(!searchInput) {\n            return false;\n        }\n\n        try {\n            const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${searchInput}`);\n             \n            if(!response.ok) {\n                throw new Error('something went wrong!');\n            }\n           console.log(searchInput);\n\n            const { meals } = await response.json();\n              console.log({meals});\n            const recipeData = meals.map((recipe) => ({\n              //TO-DO: match recipe schema \n                idMeal: recipe.idMeal,\n                strMeal: recipe.strMeal,\n                strInstructions: recipe.strInstructions,\n                //image: recipe.imageLinks?.thumbnail || '',\n            }));\n\n            setSearchedRecipes(recipeData);\n            setSearchInput('');\n        } catch(err){\n            console.error(err);\n            console.log(err);\n        }\n    };\n    \n    const handleSaveRecipe = async (idMeal) => {\n      // find the recipe in `searchedRecipes` state by the matching id\n      const recipeToSave = searchedRecipes.find((recipe) => recipe.idMeal === idMeal);\n       console.log(\"recipe to Save\",recipeToSave);\n      // get token\n  \n      \n      const token = Auth.loggedIn() ? Auth.getToken() : null;\n  \n      if (!token) {\n        return false;\n      }\n      console.log('token pass');\n      try {\n        const { data } = await saveRecipe({\n          variables: { input :recipeToSave },\n        });\n        console.log({data});\n        console.log(savedRecipeIds,data,\"Saved recipes\");\n        // if recipe successfully saves to user's account, save book id to state\n        setSavedRecipeIds([...savedRecipeIds, recipeToSave.idMeal]);\n        \n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    return (\n        <>\n      <Jumbotron fluid className='text-light bg-info'>\n        <Container>\n          <h1>Search for recipes!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a Recipe'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button className='searchBtn' type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedRecipes.length\n            ? `Viewing ${searchedRecipes.length} results:`\n            : 'Search for a recipe to begin'}\n        </h2>\n        <CardColumns>\n          {searchedRecipes.map((recipe) => {\n            return (\n              <Card key={recipe.idMeal} border='dark'>\n                {/* {recipe.image ? (\n                  <Card.Img src={recipe.image} alt={`The cover for ${recipe.strMeal}`} variant='top' />\n                ) : null} */}\n                <Card.Body>\n                  <Card.Title>{recipe.strMeal}</Card.Title>\n                  \n                  <Card.Text>{recipe.strInstructions}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedRecipeIds?.some((savedRecipeId) => savedRecipeId === recipe.idMeal)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveRecipe(recipe.idMeal)}>\n                      {savedRecipeIds?.some((savedRecipeId) => savedRecipeId === recipe.idMeal)\n                        ? 'This recipe has already been saved!'\n                        : 'Save this Recipe!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n    \n};\n\nexport default SearchRecipe;","import {gql} from '@apollo/client';\n\nexport const GET_ME = gql `\n    {\n        me{\n            _id\n            username\n            email\n            savedRecipes {\n                idMeal\n                strMeal\n                strInstructions\n                \n            }\n        }\n    }\n`; ","\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeRecipeId } from '../utils/localStorage';\nimport {useMutation, useQuery} from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_RECIPE } from '../utils/mutations';\n\n\nconst SavedRecipe = () => {\n\n  const { loading, data} = useQuery(GET_ME);\n  console.log(data);\n  const [removeRecipe, {error}] = useMutation(REMOVE_RECIPE);\n\n  const userData = data?.me || [];\n//console.log(userData);\n\n  // create function that accepts the recipe's mongo _id value as param and deletes the book from the database\n  const handleDeleteRecipe = async (idMeal) => {\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await deleteBook(bookId, token);\n      const {data} = await removeRecipe({\n        variables: { idMeal }\n      });\n\n      // upon success, remove book's id from localStorage\n      removeRecipeId(idMeal);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  \n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n  //console.log(userData.savedRecipes);\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-info'>\n        <Container>\n          <h1>Viewing saved recipes!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedRecipes.length\n            ? `Viewing ${userData.savedRecipes.length} saved ${userData.savedRecipes.length === 1 ? 'recipe' : 'recipes'}:`\n            : 'You have no saved recipes!'}\n        </h2>\n        <CardColumns>\n          {userData.savedRecipes.map((recipe) => {\n            return (\n              <Card key={recipe.idMeal} border='dark'>\n                {/* {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null} */}\n                <Card.Body>\n                  <Card.Title>{recipe.strMeal}</Card.Title>\n                  <Card.Text>{recipe.strInstructions}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteRecipe(recipe.idMeal)}>\n                    Delete this Recipe!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedRecipe;\n","// import React, { useState } from 'react';\n// import { Form, Button, Alert } from 'react-bootstrap';\n\n// import Auth from '../utils/auth';\n// import { useMutation } from '@apollo/client';\n// import { ADD_USER } from '../utils/mutations';\n\n// const SignupForm = () => {\n//     //set initial form state\n//     const [userFormData, setUserFormData] = useState({ username: '', email: '', password: ''});\n//     //set state for form validation \n//     const [validated] = useState(false);\n//     //set state for alert\n//     const [showAlert, setShowAlert] = useState(false);\n//     //define mutation for adding user \n//     const [addUser ,{error}] = useMutation(ADD_USER);\n\n//     const handleInputChange = (event) => {\n//         const { name, value } = event.target;\n//         setUserFormData({ ...userFormData, [name]: value });\n//     };\n\n//     const handleFormSubmit = async (event) => {\n//         event.preventDefault();\n\n//         const form = event.currentTarget;\n//         if(form.checkValidity() === false) {\n//             event.preventDefault();\n//             event.stopPropagation();\n//         }\n\n//         try {\n//             const { data } = await addUser({\n//                 vaiables: { ...userFormData }\n//             });\n\n//             Auth.login(data.addUser.token);\n//         } catch(err) {\n//             console.error(err);\n//             setShowAlert(true);\n//         }\n\n//         setUserFormData({\n//             username:'',\n//             email:'',\n//             password:'',\n//         });\n//     };\n\n//     return (\n//         <Form noValidate validate={validated} onSubmit={handleFormSubmit}>\n//             <Alert dismissable onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n//                 There's something wrong with your signup!\n//             </Alert>\n\n//             <Form.Group>\n//                 <Form.Label htmlFor='username'>Username</Form.Label>\n//                 <Form.Control\n//                     type='text'\n//                     placeholder='Your username'\n//                     name='username'\n//                     onChange={handleInputChange}\n//                     value={userFormData.username}\n//                     required\n//                 />\n//                 <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n//             </Form.Group>\n\n//             <Form.Group>\n//                 <Form.Label htmlFor='email'>email</Form.Label>\n//                 <Form.Control\n//                     type='email'\n//                     placeholder='Your email address'\n//                     name='email'\n//                     onChange={handleInputChange}\n//                     value={userFormData.email}\n//                     required\n//                 />\n//                 <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n//             </Form.Group>\n\n//             <Form.Group>\n//                 <Form.Label htmlFor='password'>Password</Form.Label>\n//                 <Form.Control\n//                     type='password'\n//                     placeholder='Your password'\n//                     name='password'\n//                     onChange={handleInputChange}\n//                     value={userFormData.password}\n//                     required\n//                 />\n//                 <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n//             </Form.Group>\n//             <Button \n//                 disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n//                 type='submit'\n//                 variant='success'>\n//                     Submit\n//                 </Button>\n//         </Form>\n//     );\n// };\n\n// export default SignupForm;\n\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  \n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n \n\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n  \n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData},\n      });\n\n       Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n        \n      </Form>\n      {error && <div>Sign up failed</div>}\n    </>\n  );\n};\n\nexport default SignupForm;\n","// import React, { useState } from 'react';\n// import { Form, Button, Alert } from 'react-bootstrap';\n\n// // import Auth\n// import { useMutation } from '@apollo/client';\n// //import { format } from 'mysql2';\n// import {LOGIN_USER}  from '../utils/mutations';\n\n// const LoginForm = () => {\n//     const [userFormData, setUserFormData] = useState({ email: '', password: ''});\n//     const [validated] = useState(false);\n//     const [showAlert, setShowAlert] = useState(false);\n//     const [login] = useMutation(LOGIN_USER);\n\n//     const handleInputChange = (event) => {\n//         const { name, value } = event.target;\n//         setUserFormData({ ...userFormData, [name]: value });\n//     };\n\n//     const handleFormSubmit = async (event) => {\n//         event.preventDefault();\n//         //check if form has everything (react-botstrap docs)\n//         const form = event.currentTarget;\n//         if (form.checkValidity() === false) {\n//             event.preventDefault();\n//             event.stopPropagation();\n//         }\n\n//         try {\n//             const{ data } = await login({\n//                 variables: {...userFormData}\n//             });\n\n//             //Auth.login(data.login.token)\n//         } catch(err) {\n//             console.log(err);\n//             setShowAlert(true);\n//         }\n\n//         setUserFormData({\n//             username:'',\n//             email:'',\n//             password:'',\n//         });\n//     };\n\n//     return (\n//         <>\n//         <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n//             <Alert dimissable onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n//                 Wrong login credentials! \n//             </Alert>\n//             <Form.Group>\n//                 <Form.Label htmlFor='email'>Email</Form.Label>\n//                 <Form.Control\n//                     type='text'\n//                     placeholder='Your Email'\n//                     name='email'\n//                     onChange={handleInputChange}\n//                     value={userFormData.email}\n//                     required\n//                 />\n//                 <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n//             </Form.Group>\n\n//             <Form.Group>\n//                 <Form.Label htmlFor='password'>Password</Form.Label>\n//                 <Form.Control \n//                     type='password'\n//                     placeholder='Your password'\n//                     name='password'\n//                     onChange={handleInputChange}\n//                     value={userFormData.password}\n//                     required\n//                 />\n//                 <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n//             </Form.Group>\n//             <Button\n//                 disabled={!(userFormData.email && userFormData.password)}\n//                 type='submit'\n//                 variant='success'>\n//                     Submit \n//                 </Button>\n//         </Form>\n//         </>\n//     );\n// };\n\n// export default LoginForm;\n\n\nimport React, { useState } from 'react';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  \n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: {... userFormData},\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      {error && <div>Login failed</div>}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignupForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n    const [showModal, setShowModal] = useState(false);\n\n\nreturn (\n    <>\n      <Navbar bg='info' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Recipe Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Recipes \n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Recipes\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignupForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;","import { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {setContext} from '@apollo/client/link/context';\nimport SearchRecipe from './pages/SearchRecipe';\nimport SavedRecipe from './pages/SavedRecipe';\nimport NavBar from './components/NavBar';\nimport './App.css';\n\nconst httpLink = createHttpLink({\n  uri: 'https://frozen-fortress-30519.herokuapp.com/',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <NavBar />\n        <Switch>\n          <Route exact path='/' component={SearchRecipe} />\n          <Route exact path='/saved' component={SavedRecipe} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}